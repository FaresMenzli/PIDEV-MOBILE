package com.mycompany.myapp;

import com.codename1.components.OnOffSwitch;
import com.codename1.components.SpanLabel;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.ui.Button;
import com.codename1.ui.ButtonGroup;
import com.codename1.ui.CheckBox;
import com.codename1.ui.Container;

import com.codename1.ui.RadioButton;
import com.codename1.ui.TextField;
import com.codename1.ui.spinner.Picker;
import com.esprit.Service.ServiceQuestion;
import javafx.scene.control.RadioMenuItem;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        Form F1 = new Form("Test de depistage", BoxLayout.y());

        Container cnt = new Container(BoxLayout.x());
        Label lb = new Label("Question :");
        Label Ques = new Label("Q1") ;
        cnt.addAll(lb,Ques) ;
        
      
         
        ButtonGroup bg = new ButtonGroup();
RadioButton option1 = RadioButton.createToggle("OUI", bg);
RadioButton option2 = RadioButton.createToggle("Je ne sais pas", bg);
RadioButton option3 = RadioButton.createToggle("NON", bg);
        
        

        Button btn = new Button("valider");

        F1.addAll( cnt ,option1,option2 ,option3, btn);
        F1.show();
      

        btn.addActionListener((e) -> {
            Form f3= new Form();
        SpanLabel slb = new SpanLabel("");
        f3.add(slb);
        ServiceQuestion ServiceQuestion=new ServiceQuestion();
        slb.setText(ServiceQuestion.getQuestion().toString());
         
          f3.show();
          });

            
            
          
       
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

}
